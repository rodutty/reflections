Q1: What happens when you initialize a repository? Why do you need to do it?

When you initialize a git repository, it creates a hidden .git folder in the cwd, and a bunch of subfolders and files...I assume we'll find out more about these soon. Check out version_control/reflections/.git to see more.

Why? I think these files and folders are required for git to work!


Q2: How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area contains only the changed files that you wish to be included in the commit. This gives more control over what's included in each commit, and probably decreases the overall size of the repository as an entire snapshot of the working directory doesn't need to be stored with each commit. 

Q3: How can you use the staging area to make sure you have one commit per logical change?

When making a logical change, I would only include the files that need to be revised to implement that change in the staging area.

Q4: What are some situations when branches would be helpful in keeping your history organized? How would branches help? 

I guess if you had multiple people working on various aspects of the program, having a branch for each person or team could allow them to keep track of only the changes they make to the code. If it's just me though? I guess it would be nice, as was mentioned to have a master branch that I maintain with minor tweaks and an experimental branch for more significant changes.

Q5: How do the diagrams help you visualize the branch structure?

Diagrams help me understand lots of concepts by abstracting or encoding things that aren't otherwise apparent. This is no exception!

Q6: What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

The commits from both branches are combined. The diagram reflects the relative order in which commits were added.

Q7: What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

Automatic merging is faster, but dumber. Manual merging is sometimes required, for example when a decision needs to be made about which conflicting lines of code to keep.
